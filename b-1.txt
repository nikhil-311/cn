parc-1

def tele_database():  
    phone_data = []  
    n = int(input("Enter Number of Clients :- "))  
    print("Enter Phone Numbers --\n")  
    for _ in range(n):  
        x = int(input("--> "))  
        phone_data.append(x)  
    return phone_data  
  
  
def hash_function_1(key_ele, m_size):  
    h1 = key_ele % m_size  
    return h1  
  
  
def hash_function_2(key_ele):  
    h2 = 7 - (key_ele % 7)  
    return h2  
  
  
def hashtable(ht):  
    print(f"\nHash Value \tKey")  
 
    for ele in range(len(ht)):  
        if ht[ele] != -1:  
            print(f"\n\t{ele} \t---> \t{ht[ele]}")  
        else:  
            print(f"\n\t{ele}")  
 
while (1):  
    phone_database = tele_database()  
 
    m = int(input("Enter Hash Table Size :- "))  
    hash_table = [-1] * m  
 
    print("\nIf collision occurs which collision resolution technique do you want to use?") 
    print("\n1. Linear Probing") 
    print("\n2. Double Hashing") 
    print("\n3. Exit") 
 
    opt = int(input("\nEnter Your Choice : ")) 
 
    for k in phone_database:  
        h_1 = hash_function_1(k, m)  
        h_2 = hash_function_2(k)  
 
        if hash_table[h_1] == -1:  
            hash_table[h_1] = k  
 
        else:  
            if opt == 1:  
                while hash_table[h_1] != -1:  
                    h_1 += 1  
                hash_table[h_1] = k  
                hashtable(hash_table)  
  
            elif opt == 2:  
                i = 0  
                while hash_table[h_1] != -1:  
 
                    i += 1  
                    h_1 = (h_1 + (i * h_2)) % m  
                hash_table[h_1] = k  
                hashtable(hash_table)  
  
            elif opt == 3:  
                print("\n*** TERMINATED SUCCESSFULLY ***")





prc-2------------------------------------------------------------------------------------------------------------------------------------------

set1 = set() 
set2 = set() 

while (True): 
    print("\n-----------DSAL PRACTICAL NO :- 02(A-4)----------") 
    print("\n**SET OPERATION") 
    print("1:Insert") 
    print("2:Size") 
    print("3:Remove") 
    print("4:Search ") 
    print("5:Union ") 
    print("6:Intersection") 
    print("7:Subset ") 
    print("8:Difference") 
    print("9:Exit") 
 
    choice = int(input("\nEnter your Choice :  ")) 
 
    if (choice == 1): 
        n1 = int(input("\nEnter the number of elements in set1: ")) 
        for i in range(n1): 
            data_name = input("Enter the elements in set1: ") 
            # insert 
            set1.add(data_name) 
        n2 = int(input("\nEnter the number of elements in set2: ")) 
        for i in range(n2): 
            data_name = input("Enter the elements in set2: ") 
            # insert 
            set2.add(data_name) 
        print("\nSet1 :", set1, '\nSet2 :', set2) 

    elif (choice == 2): 
        print("Size of set1: ", len(set1)) 
        print("Size of set2: ", len(set2)) 
 
    elif (choice == 3): 
        print('\nRemove element from set1 and set2 (1 for set1 & 2 for set2)') 
        inp = int(input()) 
        if inp == 1: 
            set1.pop() 
            print(set1) 
        if inp == 2: 
            set2.pop() 
            print(set2) 
 
    elif (choice == 4): 
        ip = input("\nEnter element you want to search: ") 
        if ip in set1: 
            print("set1 contains the element ", ip) 
        if ip in set2: 
            print("set2 contains the element ", ip) 
 
    elif (choice == 5): 
        print("Union is :", set1.union(set2)) 
 
    elif (choice == 6): 
        print("Intersection is : ", set1.intersection(set2)) 
 
    elif (choice == 7): 
        print("Subset is :", set1.issubset(set2)) 
 
    elif (choice == 8): 
        differ = set2.difference(set1) 
        print("Difference is : ",differ) 
 
    elif (choice == 9): 
        print("----------------SUCCESSFULLY TERMINATED----------------") 
        break 
 
    else: 
        print("Invalid Choice") 
        break

prac-3-----------------------------------------------------------------------------------------------------------------------------------------




/* A book consists of chapters, chapters consist of sections and sections consist of
subsections. Construct a tree and print the nodes. Find the time and space requirements
of your method.*/


# include <iostream>
# include <cstdlib>
# include <string.h>
using namespace std;
struct node
{
    char label[10];
    int ch_count;
    struct node *child[10];
}*root;
/*
* Class Declaration
*/
class GT
{
public:
    void create_tree();
    void display(node * r1);
    GT()
    {
        root = NULL;
    }
};
void GT::create_tree()
{
    int tbooks,tchapters,i,j,k;
    root = new node;
    cout<<"\nEnter name of book:";
    cin>>root->label;
    cout<<"\nEnter no. of chapters in book:";
    cin>>tchapters;
    root->ch_count = tchapters;
    for(i=0;i<tchapters;i++)
    {
        root->child[i] = new node;
        cout<<"\nEnter Chapter name:";
        cin>>root->child[i]->label;
        cout<<"\nEnter no. of sections in Chapter: "<<root->child[i]->label;
        cin>>root->child[i]->ch_count;
        for(j=0;j<root->child[i]->ch_count;j++)
        {
            root->child[i]->child[j] = new node;
            cout<<"\nEnter Section "<<j+1<<"name:";
            cin>>root->child[i]->child[j]->label;
        }
    }
}
void GT::display(node * r1)
{
    int i,j,k,tchapters;
    if(r1 != NULL)
    {
        cout<<"\n-----Book Hierarchy---";
        cout<<"\n Book title : "<<r1->label;
        tchapters = r1->ch_count;
        for(i=0;i<tchapters;i++)
        {
            cout<<"\n Chapter :"<<i+1;
            cout<<" "<<r1->child[i]->label;
            cout<<"\n Sections:";
            for(j=0;j<r1->child[i]->ch_count;j++)
            {

                cout<<"\n "<<r1->child[i]->child[j]->label;
            }
        }
    }
}
int main()
{
    int choice;
    GT gt;
    while (1)
    {
        cout<<"-----------------"<<endl;
        cout<<"Book Tree Creation\n1.Create\n2.Display\n3.Quit"<<endl;
        cout<<"Enter your choice : ";
        cin>>choice;
        switch(choice)
        {
        case 1:gt.create_tree();
        case 2:gt.display(root);
                break;
        case 3:exit(1);
        default:
        cout<<"Wrong choice"<<endl;
        }
    }
}


prac-4--------------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>
using namespace std;
struct node
{
    int data;
    node *L;
    node *R;
};
node *root,*temp;
int count,key;

class bst
{
    public:
    void create();
    void insert(node*,node*);
    void disin(node*);
    void dispre(node*);
    void dispost(node*);
    void search(node*,int);
    int height(node*);
    void mirror(node*);
    void min(node*);
    bst()
    {
        root=NULL;
        count=0;
    }
};
void bst::create()
{
    char ans;
    do
    {
        temp=new node;
        cout<<"Enter the data : ";
        cin>>temp->data ;
        temp->L=NULL;
        temp->R=NULL;
        if(root==NULL)
        {
            root=temp;
        }
        else
        {
            insert(root,temp);
            cout<<"Do you want to insert more value :";
            cin>>ans;
            count++;
            cout<<endl;
        }
    }while(ans=='y');
    cout<<"The Total no.of nodes are:"<<count;
}

void bst::insert(node *root,node* temp)
{
    if(temp->data>root->data)
    {
        if(root->R==NULL)
        {
            root->R=temp;
        }
        else
        insert(root->R,temp);
    }
    else
    {
        if(root->L==NULL)
        {
            root->L=temp;
        }
        else
            insert(root->L,temp);
    }
}

void bst::disin(node *root)
{
    if(root!=NULL)
    {
        disin(root->L);
        cout<<root->data<<"\t";
        disin(root->R);
        count++;
    }
}

void bst::dispre(node *root)
{
    if(root!=NULL)
    {
        cout<<root->data<<"\t";
        dispre(root->L);
        dispre(root->R);
    }
}

void bst::dispost(node *root)
{
    if(root!=NULL)
    {
        dispost(root->L);
        dispost(root->R);
        cout<<root->data<<"\t";
    }
}

void bst::search(node * root,int key)
{
    int flag=0;
    cout<<"\nEnter your key : ";
    cin>>key;
    temp=root;
    while(temp!=NULL)
    {
        if(key==temp->data)
        {
            cout<<" KEY FOUND \n";
            flag=1;
            break;
        }
        node *parent=temp;
            if(key>parent->data)
            {
                temp=temp->R;
            }
            else
            {
                temp=temp->L;
            }
    }
    if(flag==0)
    {
        cout<<" KEY NOT FOUND "<<endl;
    }
}

int bst::height(node *root)
{
    int hl,hr; 
    if(root==NULL)
    {
        return 0;
    } 
    else if(root->L==NULL && root->R==NULL)
    {
        return 0;
    }
    cout<<endl;
    hr=height(root->R);
    hl=height(root->L);
    if(hr>hl)
    {
        return(1+hr);
    }
    else
    {
        return(1+hl);
    }
}

void bst::min(node *root)
{
    temp=root;
    cout<<endl;
    while(temp->L!=NULL)
    {
        temp=temp->L;
    }
    cout<<temp->data;
}

void bst::mirror(node *root)
{
    temp=root;
    if(root!=NULL)
    {
        mirror(root->L);
        mirror(root->R);
        temp=root->L;
        root->L=root->R;
        root->R=temp;
    }
}
int main()
{
    bst t;
    int ch;
    char ans;
    do
    {
    cout<<"\n1) Insert new node 2)number of nodes in longest path 3)minimum 4) mirror 5) search 6) inorder 7) preorder 8) postorder"<<endl;
    cin>>ch;
    switch(ch)
    {
    case 1:
        t.create();
        break;
    case 2:
        cout<<"\n Number of nodes in longest path:"<<(1+(t.height(root)));
        break;
    case 3:
        cout<<"\nThe min element is:";
        t.min(root);
        break;
    case 4:
        t.mirror(root);
        cout<<"\nThe mirror of tree is: ";
        t.disin(root);
        break;
    case 5:
        t.search(root,key);
        break;
    case 6:
        cout<<"\n***************INORDER**************"<<endl;
        t.disin(root);
        break;
    case 7:
        cout<<"\n***************PREORDER**************"<<endl;
        t.dispre(root);
        break;
    case 8:
        cout<<"\n*******************POSTORDER**************"<<endl;
        t.dispost(root);
        break;
    }
    cout<<"\nDo you want to continue : "; cin>>ans;
    }while(ans=='y');
return 0;
}







prac-5-------------------------------------------------------------------------------------------------------------------------------------------------



#include <iostream>
using namespace std;
#include<string.h>
struct node
{
    char data;
    node *left;
    node *right;
};
class tree
{ 
    char prefix[20];
    public: node *top;
    void expression(char []);
    void display(node *);
    void non_rec_postorder(node *);
    void del(node *);
};
class stack1
{
    node *data[30];

    int top;
    public:
    stack1()
    {
        top=-1;
    }
    int empty()
    {
        if(top==-1)
            return 1;
        return 0;
    }
    
    void push(node *p)
    {
        data[++top]=p;
    }
    node *pop()
    {
        return(data[top--]);
    }
};
void tree::expression(char prefix[])
{
    char c;
    stack1 s;
    node *t1,*t2;
    int len,i;
    len=strlen(prefix);
    for(i=len-1;i>=0;i--)
    {
        top=new node;
        top->left=NULL;
        top->right=NULL;
        if(isalpha(prefix[i]))
        {
            top->data=prefix[i];
            s.push(top);
        }
        else if(prefix[i]=='+'||prefix[i]=='*'||prefix[i]=='-'||prefix[i]=='/')
        {
            t2=s.pop();
            t1=s.pop();
            top->data=prefix[i];
            top->left=t2;
            top->right=t1;
            s.push(top);
        }
    }
    top=s.pop();
}
void tree::display(node * root)
{
    if(root!=NULL)
    { 
        cout<<root->data;
        display(root->left);
        display(root->right);
    }
}
void tree::non_rec_postorder(node *top)
{ 
    stack1 s1,s2; /*stack s1 is being used for flag . A NULL dataimplies that the right subtree has not been visited */
    node *T=top;
    cout<<"\n";
    s1.push(T);
    while(!s1.empty())
    {
        T=s1.pop();
        s2.push(T);
        if(T->left!=NULL)
            s1.push(T->left);
        if(T->right!=NULL)
            s1.push(T->right);
    }
    while(!s2.empty())
    {
        top=s2.pop();
        cout<<top->data;
    }
}
void tree::del(node* node)
{
    if (node == NULL) return;
/* first delete both subtrees */
    del(node->left);
    del(node->right);
/* then delete the node */
    cout<<" Deleting node:"<<node->data;
    delete node;
}
int main()
{
    char expr[20];
    tree t;
    cout<<"Enter prefix Expression: ";
    cin>>expr;
    cout<<expr;
    t.expression(expr);
    t.display(t.top);
    cout<<endl;
    t.non_rec_postorder(t.top);
    t.del(t.top);
    t.display(t.top);
}


prac-6---------------------------------------------------------------------------------------------------------------------------------------------


//using adj matrix -BFS(Que)
#include<iostream>
#include<stdlib.h>
using namespace std;
int cost[10][10],i,j,k,n,qu[10],front,rear,v,visit[10],visited[10];
int stk[10],top,visit1[10],visited1[10];
int main()
{
    int m;
    cout <<"\n enterno of vertices";
    cin >> n;
    cout <<"\n enter no of edges";
    cin >> m;
    cout <<"\nEDGES "<<m;
    for(k=1;k<=m;k++)
    {
        cin >>i>>j;
        cost[i][j]=1;
        cost[j][i]=1;
    }
//display function
    cout<<"The adjacency matrix of the graph is:"<<endl;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<" "<<cost[i][j];
        }
        cout<<endl;

    }
    cout <<"Enter initial vertex";
    cin >>v;
    cout <<"The BFS of the Graph is\n";
    cout << v;
    visited[v]=1;
    k=1;
    while(k<n)
    {
        for(j=1;j<=n;j++)
        if(cost[v][j]!=0 && visited[j]!=1 && visit[j]!=1)
        {
            visit[j]=1;
            qu[rear++]=j;
        }
        v=qu[front++];
        cout<<v << " ";
        k++;
        visit[v]=0; visited[v]=1;
    }
    cout <<"Enter initial vertex";
    cin >>v;
    cout <<"The DFS of the Graph is\n";
    cout << v;
    visited[v]=1;
    k=1;
    while(k<n)
    {
        for(j=n;j>=1;j--)
        if(cost[v][j]!=0 && visited1[j]!=1 && visit1[j]!=1)
        {
            visit1[j]=1;
            stk[top]=j;
            top++;
        }
        v=stk[--top];
        cout<<v << " ";
        k++;
        visit1[v]=0; visited1[v]=1;
    }
    return 0;
}

prac-7----------------------------------------------------------------------------------------------------------------------------------------------------


//using adj matrix -BFS(Que)
#include<iostream>
#include<stdlib.h>
using namespace std;
int cost[10][10],i,j,k,n,qu[10],front,rear,v,visit[10],visited[10];
int stk[10],top,visit1[10],visited1[10];
int main()
{
    int m;
    cout <<"\n enterno of vertices";
    cin >> n;
    cout <<"\n enter no of edges";
    cin >> m;
    cout <<"\nEDGES "<<m;
    for(k=1;k<=m;k++)
    {
        cin >>i>>j;
        cost[i][j]=1;
        cost[j][i]=1;
    }
//display function
    cout<<"The adjacency matrix of the graph is:"<<endl;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cout<<" "<<cost[i][j];
        }
        cout<<endl;

    }
    cout <<"Enter initial vertex";
    cin >>v;
    cout <<"The BFS of the Graph is\n";
    cout << v;
    visited[v]=1;
    k=1;
    while(k<n)
    {
        for(j=1;j<=n;j++)
        if(cost[v][j]!=0 && visited[j]!=1 && visit[j]!=1)
        {
            visit[j]=1;
            qu[rear++]=j;
        }
        v=qu[front++];
        cout<<v << " ";
        k++;
        visit[v]=0; visited[v]=1;
    }
    cout <<"Enter initial vertex";
    cin >>v;
    cout <<"The DFS of the Graph is\n";
    cout << v;
    visited[v]=1;
    k=1;
    while(k<n)
    {
        for(j=n;j>=1;j--)
        if(cost[v][j]!=0 && visited1[j]!=1 && visit1[j]!=1)
        {
            visit1[j]=1;
            stk[top]=j;
            top++;
        }
        v=stk[--top];
        cout<<v << " ";
        k++;
        visit1[v]=0; visited1[v]=1;
    }
    return 0;
}


prac-8----------------------------------------------------------------------------------------------------------------------------------------------------



#include<iostream>
using namespace std;
void con_obst(void);
void print(int,int);
float a[20],b[20],wt[20][20],c[20][20];
int r[20][20],n;
int main()
  {
	int i;
	cout<<"\n**** PROGRAM FOR OBST ******\n";
	cout<<"\nEnter the no. of nodes : ";
	cin>>n;cout<<"\nEnter the probability for successful search :: ";
	
	for(i=1;i<=n;i++)
	  {
		cout<<"p["<<i<<"]";
		cin>>a[i];
	  }
	cout<<"\nEnter the probability for unsuccessful search :: ";
	
	for(i=0;i<=n;i++)
	  {
		cout<<"q["<<i<<"]";
		cin>>b[i];
	  }
	con_obst();
	print(0,n);
	cout<<endl;
}
void con_obst(void)
{
	int i,j,k,l,min;
	for(i=0;i<n;i++)
	  { //Initialisation
		c[i][i]=0;
		r[i][i]=0;
		wt[i][i]=b[i];
		// for j-i=1 can be j=i+1
		wt[i][i+1]=b[i]+b[i+1]+a[i+1];
		c[i][i+1]=b[i]+b[i+1]+a[i+1];
		r[i][i+1]=i+1;
	  }
	c[n][n]=0.0;
	r[n][n]=0;
	wt[n][n]=b[n];
	//for j-i=2,3,4....,n
	for(i=2;i<=n;i++)
	  {
		for(j=0;j<=n-i;j++)
		  {
			wt[j][j+i]=b[j+i]+a[j+i]+wt[j][j+i-1];
			c[j][j+i]=9999;
			for(l=j+1;l<=j+i;l++)
			  {
				if(c[j][j+i]>(c[j][l-1]+c[l][j+i]))
				  {
					c[j][j+i]=c[j][l-1]+c[l][j+i];
					r[j][j+i]=l;
				  }
			  }
			c[j][j+i]+=wt[j][j+i];
		  }
		cout<<endl;
	  }
	cout<<"\n\nOptimal BST is :: ";
	cout<<"\nw[0]["<<n<<"] :: "<<wt[0][n];
	cout<<"\nc[0]["<<n<<"] :: "<<c[0][n];
	cout<<"\nr[0]["<<n<<"] :: "<<r[0][n];
  }
void print(int l1,int r1)
{
	if(l1>=r1)
		return;
	if(r[l1][r[l1][r1]-1]!=0)
		cout<<"\n Left child of "<<r[l1][r1]<<" :: "<<r[l1][r[l1][r1]-1];
	if(r[r[l1][r1]][r1]!=0)
		cout<<"\n Right child of "<<r[l1][r1]<<" :: "<<r[r[l1][r1]][r1];
	print(l1,r[l1][r1]-1);
	print(r[l1][r1],r1);
	return;
}


prac-9----------------------------------------------------------------------------------------------------------------------------------------------------


#include<iostream>
using namespace std;

class node
{
public:
	string key;
	string meaning;
	node *left;
	node *right;
};

class AVL
{
	node *root;
        public:
            	AVL()
            	{
            		root=NULL;
            	}
            	
	            void create();
	            node *insert(node *cur,node *temp);
            	node *balance(node *temp);
            	int dif(node *temp);
            	int height(node *temp);
            	int maximum(int a,int b);
            	
            	node* LL(node *par);
            	node* RR(node *par);
            	node* LR(node *par);
            	node* RL(node *par);
            	
            	void ascending(node *temp);
            	node *delete_n(node *root,string key1);
            	void deleten();
            	
            	node *extractmin(node *t);
                void descending(node *temp);
                void display();
                bool search(node *cur,string key1);
                void search_value();
};

void AVL::create()
{
	char answer;
	node *temp;
	do
	{
		temp=new node();
		cout<<"\n Enter the keyword:";
		cin>>temp->key;
		cout<<"\n Enter the meaning:";
		cin>>temp->meaning;
		temp->left=temp->right=NULL;

			root=insert(root,temp);

		cout<<"\n Do you want to add another word?(y/n)";
		cin>>answer;
	}
	while(answer=='y'||answer=='Y');
}


node* AVL :: insert(node *cur,node *temp)
{
	if(cur==NULL)
	{
		return temp;
	}
	if(temp->key<cur->key)
	{
		cur->left=insert(cur->left,temp);
		cur=balance(cur);
	}
	else if(temp->key>cur->key)
	{
		cur->right=insert(cur->right,temp);
		cur=balance(cur);
	}
	return cur;
}

node* AVL::balance(node *temp)
{
	int bal;
	bal=dif(temp);
	
	if(bal>=2)
	{
		if(dif(temp->left)<0)
			temp=LR(temp);
		else
			temp=LL(temp);
	}
	else if(bal<=-2)
	{
		if(dif(temp->right)<0)
			temp=RR(temp);
		else
			temp=RL(temp);
	}
	return temp;
}


int AVL::dif(node *temp)
{
	int l,r;
	l=height(temp->left);
	r=height(temp->right);
	return(l-r);
}

int AVL::height(node *temp)
{
	if(temp==NULL)
		return(-1);
	else
		return(max(height(temp->left),height(temp->right))+1);
}

int AVL::maximum(int a,int b)
{
	if(a>b)
		return a;
	else
		return b;
}

node* AVL::LL(node *par)
{
	node *temp,*temp1;
	temp=par->left;
	temp1=temp->right;
	temp->right=par;
	par->left=temp1;
	return temp;
}

node* AVL::RR(node *par)
{
	node *temp,*temp1;
	temp=par->right;
	temp1=temp->left;
	temp->left=par;
	par->right=temp1;
	return temp;
}

node* AVL::LR(node *par)
{
	par->left=RR(par->left);
	return(LL(par));
}

node* AVL::RL(node *par)
{
	par->right=LL(par->right);
	return(RR(par));
}

void AVL::ascending(node *temp)
{
        if(temp!=NULL)
        {
                ascending(temp->left);
                cout<<"\n\t"<<temp->key<<" : "<<temp->meaning;
                ascending(temp->right);
        }
}

void AVL::descending(node *temp)
{
        if(temp!=NULL)
        {
                descending(temp->right);
                cout<<"\n\t"<<temp->key<<" : "<<temp->meaning;
                descending(temp->left);
        }
}


void AVL::display()
{
        cout<<"\n The keywords in ascending order are : \n";
        ascending(root);
        cout<<"\n The keywords in descending order are : \n";
        descending(root);
}

bool AVL::search(node *cur,string key1)
{
	if(cur)
	{
		if(cur->key==key1)
			return true;
		if(cur->key>key1)
			return search(cur->left,key1);
		else
			return search(cur->right,key1);
	}
	return false;
}

void AVL::search_value()
{
	string key2;
        cout<<"\n Enter the keyword you wish to search : ";
        cin>>key2;
        if(search(root,key2))
                cout<<"\n The entered keyword is present in the AVL tree";
        else
                cout<<"\n The entered keyword is not present in the AVL tree";
}


node* AVL::delete_n(node* cur,string key1)
{
    if ( !cur)
    	return cur;
    if ( key1 < cur->key )
        cur->left = delete_n(cur->left, key1);

    else if( key1 > cur->key )
        cur->right = delete_n(cur->right, key1);

    else
    {
        node *l = cur->left;
        node *r = cur->right;
        delete cur;
        if ( !r )
        	return l;
        node *m=r;
        
        while(m->left)
        	m=m->left;
        m->right = extractmin(r);
        m->left = l;
        return balance(m);
    }
    return balance(cur);
}

    node* AVL::extractmin(node *t)
    {
        if ( !t->left ) 
        return t->right;
        t->left = extractmin(t->left);
        return balance(t);
    }

void AVL::deleten()
{
	string key;
	cout<<"\n Enter the keyword to be deleted : ";
	cin>>key;
	root=delete_n(root,key);
}

int main()
{
  char c;
  int ch;
  AVL a;
  do
  {
      cout<<"*********************************";
	  cout<<"\n 1.Insert a keyword in AVL tree.";
	  cout<<"\n 2.Display the AVL tree.";
	  cout<<"\n 3.Search a keyword";
	  cout<<"\n 4.Delete a keyword.";
	  cout<<"\n Enter your choice : ";
	  cin>>ch;
	  switch(ch)
	  {
      	  case 1 : a.create();
               break;
      	  case 2 : a.display();
               break;
      	  case 3 : a.search_value();
               break;
      	  case 4 : a.deleten();
               break;
      	  default : cout<<"\n Wrong choice ! ";
	  }
	  cout<<"\n Do you want to continue? (y/n): ";
	  cin>>c;
  	  }
  	  while(c=='y'||c=='Y');
  return 0;
}


prac-10---------------------------------------------------------------------------------------------------------------------------------------------------


#include<iostream>
#include<string>
#define N 20
using namespace std;
string Q[10];
int Pr[10];
int r = -1,f = -1,n;
void enqueue(string data,int p)//Enqueue function to insert data and its priority in queue
{
	int i;
	if((f==0)&&(r==n-1)) //Check if Queue is full
		cout<<"Queue is full";
	else {
		if(f==-1) { //if Queue is empty
			f = r = 0;
			Q[r] = data;
			Pr[r] = p;

		}
		else {
			for(i = r;i>=f;i--)
 {
				if(p>Pr[i]) {
					Q[i+1] = Q[i];
					Pr[i+1] = Pr[i];	
				}
				else break;
			}
			Q[i+1] = data;
			Pr[i+1] = p;
			r++;
		}	
	}

}
void print() 
{ //print the data of Queue
	int i;
	for(i=f;i<=r;i++) 
    {
		cout << "Patient's Name - "<<Q[i];
		switch(Pr[i]) 
        {
			case 1: 
				cout << " Priority - 'Checkup' " << endl;
			break;
			case 2:
				cout << " Priority - 'Non-serious' " << endl;
			break;
			case 3:
				cout << " Priority - 'Serious' " << endl;
			break;
			default:
				cout << "Priority not found" << endl;
		}
	}
}

void dequeue() { //remove the data from front
	if(f == -1) 
    {
		cout<<"Queue is Empty";
	}	
	else 
    {
	    cout<<"deleted Element ="<<Q[f]<<endl;
	    cout<<"Its Priority = "<<Pr[f]<<endl;
		if(f==r) f = r = -1;
		else f++;
	}
}

int main() 
{
	string data;
	int opt,i,p;
	cout<<"Enter Your Choice:-"<<endl;
	do 
    {
	    cout << "1 for Insert the Data in Queue" << endl << "2 for show the Data in Queue " << endl << "3 for Delete the data from the Queue" 
		<< endl << "0 for Exit"<< endl;
	    cin >> opt;
		switch(opt) 
        {
			case 1:
				cout << "Enter the number of patinent" << endl;
				cin >> n;
				i = 0;
			    for(i=0;i<n;i++) 
			    {
					cout << "Enter your name of the patient : ";
					cin >> data;
                    cout << "Enter your Prioritys (3: serious, 2: non-serious, 1: genral checkup) : ";
					cin >> p;
					enqueue(data,p);
						
			    }
			    break;
			case 2:
				print();
			    break;
			case 3:
				 dequeue();
			    break;
		}
	}while(opt!=0);
    return 0;
}





prac-11---------------------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>
#include <fstream>
using namespace std;

class student
{

	int roll_no;
	char Name[30];
	char Division[5];
	char Address[50];
	

	public:
	void accept();
	void display();
	int rollno()
	{
		return roll_no;
	}
	
};


void student::accept()
{
	cout<<"\nEnter Roll Number: ";
	cin>>roll_no;

	cout<<"\nEnter Name: ";
	cin.ignore();
	cin.getline(Name,30);
	
	cout<<"\nEnter Division: ";
	cin>>Division;
	
	cout<<"\nEnter Address: ";
	cin>>Address;

	cout<<"\n";
}


void student::display()
{
	cout<<"\n"<<roll_no<<"\t"<<Name<<"\t\t"<<Division<<"\t"<<Address;
	
}


void create()
{
	student s;
	int n, i;

	ofstream out("Student.txt");
	cout<<"\nHow many records do you want to enter?: ";
	cin>>n;

	for(i=0;i<n;i++)
	{
		s.accept();
		out.write((char *)&s,sizeof(s));
	}

	out.close();
}



void search()
{
	int n, flag=0;

	cout<<"\nEnter Roll Number To Be Searched: ";
	cin>>n;
	ifstream infile("Student.txt");

	student s;
	while(infile.read((char *)&s,sizeof(s)))
	{
		if(s.rollno()==n)
		{
			cout<<"\nRecord Found\n";
			cout<<"\nRoll Number          Name                      Division         Address";
			s.display();
			flag=1;
			break;
		}
	}

	if(flag==0)
	{
		cout<<"\nRecord Not Found.";
	}

	infile.close();
}



void display()
{
	student s;
	ifstream infile("Student.txt");
	while(infile.read((char *)&s, sizeof(s)))
	{
		s.display();
	}

	infile.close();
}


void add_record()
{
	student s;
	ofstream outfile("Student.txt",ios::app);
	s.accept();
	outfile.write((char *)&s,sizeof(s));
	outfile.close();
	cout<<"Record Successfully Added.";
}




void delete_record()
{
	int n, flag=0;
	cout<<"\nEnter Roll Number Whose Record To Be Deleted:";
	cin>>n;
	ifstream infile("student.txt"); // to read from source file
	ofstream temp("temp.txt"); // to write in destination file(temporary file)
	student s;
	while(infile.read((char *)&s, sizeof(s)))
	{
		if(s.rollno()!=n)
		{
			temp.write((char *)&s, sizeof(s));
		}

		else
		{
			flag=1;
			cout<<"\nRecord Successfully Deleted.";
		}
	}

		if(flag==0)
		{
			cout<<"\nRecord Not Found.";
		}

		infile.close();
		temp.close();
		remove("Student.txt");
		rename("temp.txt","Student.txt");
}



int main()
{
	int choice;
	ofstream out("Student.txt");
	out.close();
	do
	{   cout<<"\n";
		cout<<"\nMenu:\n1) Create Database.\n2) Display.\n3) Add record.\n4) Search Record.\n5)Delete Record.\n6) Exit.";
		cout<<"\n\nEnter Your Choice:  ";
		cin>>choice;

		switch(choice)
		{
			case 1:
				cout<<"\n";
				create();
				break;

			case 2:
				cout<<"\n";
				cout<<"\nRoll Number          Name         Division         Address";
				display();
				break;

			case 3:
				cout<<"\n";
				add_record();
				break;

			case 4:
				cout<<"\n";
				search();
				break;
		
			case 5:
				cout<<"\n";
				delete_record();
				break;

			case 6:
				cout<<"\n";
				cout<<"You Have Successfully Exitted...";
				break;
		} 
	}
	while(choice!=6);

	return 0;
}


-----------------------------------------------------------------------------------------------------------------------------------------------------0-